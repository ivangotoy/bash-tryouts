#!/usr/bin/env bash
#
# Ivan Angelov ivangotoy@gmail.com
# https://digtvbg.com/
#
# This is a bash script that will:
#
# Check some basic software availability
#
# Setup backup solution based on restic
#
# - user is responsible for setting up a restic backup repo directory:
#
# Example: restic init --repo /home/$USER/BACKUP
#
# Feel free to use google-drive-ocamlfuse to mount 
#
# your google drive folder in /home/$USER/BACKUP for truly online backups done right :)
#
# You can get restic from here for example: https://beta.restic.net/?sort=time&order=desc
#
# Define start time:
start="$(date +%s)"
#
# Mount your Gdrive in a local directory:
# 
# Example: 
#
# ocamlfuse etc.
#
# Configure restic:
#
# restic-includes.conf is a list of full paths of directories for backup
#
# restic-excludes.conf is a list of full paths of directories that will not be backed up
#

includes="/home/$USER/restic-includes.conf"
excludes="/home/$USER/restic-excludes.conf"

# Define a neat way to call/invoke restic in a "cmd" function:
#
# N.B. /home/$USER/BACKUP should exist - be it local dir or remote mount
#
# make sure restic-pass is an existing filename containing the restic password for reading/decripting the backup - chmod it accordingly 400

if [[ ! -d "/home/$USER/BACKUP" ]] || [[ ! -f "/home/$USER/restic-pass" ]];
then
printf "Restic BACKUP dir or restic-pass problem. Check a couple of lines above in this script for hints.\n"
exit 1
fi

cmd() {
$(which restic) -r /home/$USER/BACKUP -p /home/$USER/restic-pass
}

# Important custom editing of the script with meaningful effects should be above this line I believe.
#
# Print timing information plus end-user readable messages and do the actual backup:

now1="$(date +'%d %B %Y %Hh:%Mm:%Ss')"
printf "#### "$now1" - BACKUP STARTED!\n"
cmd unlock >/dev/null 2>&1
now2="$(date +'%d %B %Y %Hh:%Mm:%Ss')"
printf ""$now2" - UNLOCK COMPLETE!\n"
cmd backup --files-from="$includes" --exclude-file="$excludes" >/dev/null 2>&1
now3="$(date +'%d %B %Y %Hh:%Mm:%Ss')"
printf ""$now3" - BACKUP COMPLETE!\n"                         
cmd forget --keep-last 10 --prune >/dev/null 2>&1
now4="$(date +'%d %B %Y %Hh:%Mm:%Ss')"
printf ""$now4" - OLDEST SNAPSHOT DELETED!\n"
cmd unlock >/dev/null 2>&1
now5="$(date +'%d %B %Y %Hh:%Mm:%Ss')"
printf ""$now5" - REPO UNLOCKED FOR THE NEXT BACKUP!\n"
end="$(date +%s)"
runtime="$((end-start))"
minutes="$(($runtime / 60))"
printf "TOTAL TIME TAKEN: "$runtime" seconds!\n"
printf "WHICH IS: "$minutes" minutes!\n"
now6="$(date +'%d %B %Y %Hh:%Mm:%Ss')"
printf "#### "$now6" - BACKUP ENDED!\n"
